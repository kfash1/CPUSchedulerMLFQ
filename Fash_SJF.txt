//SJF Source Code
//Kevin Fash
//Laura Casals


#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <iomanip>

using namespace std;

#define UNINIT_ARRIVAL_TIME - 1

class Process
{
public:
    Process();
    Process(string name, vector<int> values);
    int getArrivalTime();
    void setArrivalTime(int time);
    int getProcessState();
    void setProcessState(int state);
    void calculateTotalBurst();
    void setFirstArrivalTime(int time);
    void setLastTime(int time);
    string getName();
    int getData(int i);
    void set(int i, int value);
    void print();
    void popFirstItem();
    int processSize();
    int getTotalBurst();
    int getFirstArrivalTime();
    int getLastTime();

private:
    string name;
    int arrivalTime = 0; //time when process arrived to ready state
    vector<int> data; //contains data
    int processState = 0; //Determines whether process is ready, in I/O
    int totalBurst;
    int firstArrivalTime;
    int lastTime;
};

//Object constructor
Process::Process() :
    totalBurst(0),
    firstArrivalTime(UNINIT_ARRIVAL_TIME)
{
    
}

Process::Process(string name, vector<int> values):
    totalBurst(0),
    firstArrivalTime(UNINIT_ARRIVAL_TIME)
{
    this->name = name;
    this->data = values;
    calculateTotalBurst();
}

//Returns the arrival time when the process will get to ready state
int Process::getArrivalTime()
{
    return arrivalTime;
}

//Sets the arrival time
void Process::setArrivalTime(int time)
{
    arrivalTime = time;
}

//Returns the process state
int Process::getProcessState()
{
    return processState;
}

//Changes the process state
void Process::setProcessState(int state)
{
    processState = state;
}

//calculating all the CPU and I/0 bursts
void Process::calculateTotalBurst()
{
    totalBurst = 0;
    for(int i = 0; i < data.size(); i ++)
    {
        totalBurst += data[i];
    }
}

//first time its on the CPU
void Process::setFirstArrivalTime(int time)
{
    firstArrivalTime = time;
}

//Last time its on the CPU
void Process::setLastTime(int time)
{
    lastTime = time;
}

//Returns name
string Process::getName()
{
    return name;
}

//Returns value of data from vector at index i
int Process::getData(int i)
{
    return data[i];
}

void Process::set(int i, int value)
{
    data[i] = value;
}

void Process::print()
{
    for (int i = 0; i < data.size(); i++)
    {
        cout << data[i] << ", ";
    }
    cout << endl;
}

void Process::popFirstItem()
{
    data.erase(data.begin());
}

int Process::processSize()
{
    return int(data.size());
}

int Process::getTotalBurst()
{
    return totalBurst;
}

int Process::getFirstArrivalTime()
{
    return firstArrivalTime;
}

int Process::getLastTime()
{
    return lastTime;
}

class Queue
{
public:
    Queue();
    Queue(string name);
    Queue(vector<Process> processes, string name);
    void displayReadyQueue();
    void displayIOQueue(int time);
    void sortReadyQueue();
    int runProcess(int cpuTime, Queue& ioQueue, Queue& completeQueue);
    void printData();
    void addProcess(Process process);
    void popFirstItem();
    void checkIOStatus(int time, Queue& readyQueue);
    void sortIOQueue();
    int getIdle();
    int getArrivalOfFirstItem();
    
private:
    vector<Process> process;
    string name;
    int idle = 0;
};

Queue::Queue()
{
    
}

Queue::Queue(string name)
{
    this->name = name;
}

Queue::Queue(vector<Process> process, string name)
{
    this->process = process;
    this->name = name;
}

//Displays processes in ready queue
void Queue::displayReadyQueue()
{
    cout << endl << "*******************************************" << endl << endl;
    cout << "List of processes in the ready queue:" << endl << endl;
    cout << "Process      Burst" << endl;

    //Checking if the ready queue is empty
    if (process.size() == 0)
    {
        cout << "[Empty]" << "      " << "[Empty]" << endl;
    }

    for (int i=0; i<process.size(); i++)
    {
        cout << process[i].getName() << "           " << process[i].getData(0) << endl;
    }

    cout << endl << "-------------------------------------------" << endl << endl;
}

//Displays processes in IO queue
void Queue::displayIOQueue(int time)
{
    cout << "List of processes in the IO queue:" << endl << endl;
    cout << "Process      Remaining IO time" << endl;

      //Checking if the ioQueue is empty
    if (process.size() == 0)
    {
        cout << "[Empty]" << "      " << "[Empty]" << endl;
    }

    for (int i=0; i<process.size(); i++)
    {
        cout << process[i].getName() << "           " << process[i].getArrivalTime()-time << endl;
    }
    cout << endl << "###########################################" << endl << endl;
}

//Sort the processes by CPU burst
void Queue::sortReadyQueue()
{
    //If this is empty, we don't want it to try to do a sort becasue it will crash
    if (process.size() == 0)
    {
        return;
    }

    //bubblesort
    for (int i = 0; i < process.size()-1; i++)
    {
        for (int j = 0; j < process.size()-i-1; j++)
        {
            if (process[j].getData(0) > process[j+1].getData(0))
            {
                swap(process[j], process[j+1]);
            }
        }
    }
}

void Queue::sortIOQueue()
{
    //If this is empty, we don't want it to try to do a sort becasue it will crash
    if (process.size() == 0)
    {
        return;
    }

    //bubblesort
    for (int i = 0; i < process.size()-1; i++)
    {
        for (int j = 0; j < process.size()-i-1; j++)
        {
            if (process[j].getArrivalTime() > process[j+1].getArrivalTime())
            {
                swap(process[j], process[j+1]);
            }
        }
    }
}

//Takes process with shortest job and adds
//its burst to the cpuTime.  It then moves the process
//to the ioQueue and updates the arrivalTime for
//when it will be able to go back to the readyQueue.
//Passes the ioQueue by reference so both queues can
//be updated
int Queue::runProcess(int cpuTime, Queue& ioQueue, Queue& completeQueue)
{
     //accounting for Idle time if the ready Queue is empty
     //but there are still process in the ioQueue
    if( process.size() == 0)
    {
        int nextArrival = ioQueue.getArrivalOfFirstItem();

        if (nextArrival != UNINIT_ARRIVAL_TIME)
        {
            idle += (nextArrival - cpuTime);
            return nextArrival;
        }
        else{
            idle += 1;
            return cpuTime + 1;
        }
    }

    //Getting the value for when the process first gets on the CPU
    if(process[0].getFirstArrivalTime() == UNINIT_ARRIVAL_TIME)
    {
        process[0].setFirstArrivalTime(cpuTime);
    }


    cout << "Process on the CPU: " << process[0].getName() << endl;
    cpuTime = cpuTime + process[0].getData(0);
    
    //Checking to see if process is down to its last item, if so
    //deletes the process
    if (process[0].processSize() > 1)
    {
        //Setting arrival time on process
        int newArrivalTime = cpuTime + process[0].getData(1);
        process[0].setArrivalTime(newArrivalTime);
    
        process[0].popFirstItem();
        process[0].popFirstItem();
    
        Process transfer = process[0];
        ioQueue.addProcess(transfer);
    
        popFirstItem();
    }
    else{
        process[0].setLastTime(cpuTime);
        Process transfer = process[0];
        completeQueue.addProcess(transfer);
        popFirstItem();
    }
    
    return cpuTime;
}

void Queue::printData()
{
    cout << left << setw(2) << "Process"
         << right << setw(7) << "RT"
         << right << setw(12) << "WT"
         << right << setw(12) << "TT" << endl;
    cout << endl;

    //Sorting the finished processes in order
    for (int i = 0; i < process.size() - 1; i++)
    {
        for (int j = 0; j < process.size() - i - 1; j++)
        {
            if (process[j].getName() > process[j + 1].getName())
            {
                swap(process[j], process[j + 1]);
            }
        }
    }

    float responseTimeAvg = 0;
    float waitTimeAvg = 0;
    float turnAroundAvg = 0;

    int k = 0;
    while(k < process.size())
    {
        int responseTime = process[k].getFirstArrivalTime() - 0;
        responseTimeAvg = responseTimeAvg + responseTime;

        int turnAround = process[k].getLastTime();
        turnAroundAvg = turnAroundAvg + turnAround;

        int waitTime = turnAround - process[k].getTotalBurst();
        waitTimeAvg = waitTimeAvg + waitTime;

        cout << left << setw(2) << process[k].getName()
             << right << setw(12) << responseTime
             << right << setw(12) << waitTime
             << right << setw(12) << turnAround << endl;

        k++;

    }

    cout << left << setw(2) << "Avg"
         << setprecision(4)
         << right << setw(13) << responseTimeAvg/9
         << right << setw(11) << waitTimeAvg/9
         << right << setw(11) << turnAroundAvg/9 << endl;
    

}

void Queue::addProcess(Process p)
{
    process.push_back(p);
}

void Queue::popFirstItem()
{
    process.erase(process.begin());
}

//Checks the processes in the IO queue to see if they're ready
//to return to the ready queue
void Queue::checkIOStatus(int time, Queue& readyQueue)
{
    int i = 0;
    while(i < process.size())
    {
        //do your stuff
        if(process[i].getArrivalTime()<=time)
        {
            Process transfer = process[i];
            readyQueue.addProcess(transfer);
            
            popFirstItem();

            i = 0;//setting the conditional variable to the starting value
            continue;//and going to the next iteration to "restart" the loop
        }
        else
        {
            i++;
        }
    }
}

int Queue::getIdle()
{
    return idle;
}

int Queue::getArrivalOfFirstItem()
{
    if (process.size() > 0)
    {
        return process[0].getArrivalTime();
    }

    return UNINIT_ARRIVAL_TIME;
}

int main()
{
    int cpuTime = 0;
    
    cout << "CPU Scheduler Project - SJF" << endl;
    cout << "Kevin Fash" << endl;
    cout << "Laura Casals" << endl << endl;
    
    //process goes {CPU burst, I/O time, CPU burst, I/O time, CPU burst, I/O time,........, last CPU burst}
    vector<int> data1 = {7, 22, 6, 19, 12, 44, 8, 21, 10, 37, 5, 24, 6, 44, 7 , 43, 8};
    vector<int> data2 = {14, 48, 15, 44, 17, 42, 22, 37, 19, 76, 14, 41, 16, 31, 17, 43, 18};
    vector<int> data3 = {8, 43, 7, 41, 6, 45, 8, 21, 9, 35, 14, 18, 5, 26, 3, 31, 6};
    vector<int> data4 = {13, 37, 4, 41, 5, 35, 12, 41, 8, 55, 15, 34, 6, 73, 5, 77, 3 };
    vector<int> data5 = {6, 34, 7, 21, 5, 44, 6, 32, 7, 28, 3, 48, 11, 44, 6, 33, 3, 28, 4};
    vector<int> data6 = {9, 32, 4, 28, 5, 10, 6, 12, 7, 14, 9, 18, 12, 24, 15, 30, 8};
    vector<int> data7 = {14, 46, 17, 41, 11, 42, 15, 21, 4, 32, 7, 19, 16, 33, 10};
    vector<int> data8 = {4, 64, 5, 53, 6, 44, 4, 73, 6, 87, 5 ,66, 8, 25, 6, 33, 9, 41, 7};
    vector<int> data9 = {13, 37, 8, 41, 7, 27, 12, 29, 5, 27, 6, 18, 3, 33, 4, 62, 6};

    //Initializing processes
    Process p1("P1", data1);
    Process p2("P2", data2);
    Process p3("P3", data3);
    Process p4("P4", data4);
    Process p5("P5", data5);
    Process p6("P6", data6);
    Process p7("P7", data7);
    Process p8("P8", data8);
    Process p9("P9", data9);
    
    //Creating vector of Process to build readyQueue
    vector<Process> transferQueue1 {p1, p2, p3, p4, p5, p6, p7, p8, p9};
    
    Queue readyQueue(transferQueue1, "readyQueue");
    Queue ioQueue("ioQueue");
    Queue completeQueue("completeQueue");
    
    
    //Start of SJF algorithm
    
    readyQueue.sortReadyQueue();

    //readyQueue.displayReadyQueue();
    //ioQueue.displayIOQueue(cpuTime);
    
    
    //for testing, doing a large loop
    //270 is the exact number we need for everthing to get processed
    while (cpuTime != 896)
    {
        cout << "Current Time: " << cpuTime << endl;
    
        cpuTime = readyQueue.runProcess(cpuTime, ioQueue, completeQueue);
    
        ioQueue.checkIOStatus(cpuTime, readyQueue);
    
        readyQueue.sortReadyQueue();

        ioQueue.sortIOQueue();
        
        readyQueue.displayReadyQueue();

        ioQueue.displayIOQueue(cpuTime);
    }
    
    //Outputing last CPU time, ready queue, and I/O Queue
    cout << "Current Time: " << cpuTime << endl;
    readyQueue.displayReadyQueue();
    ioQueue.displayIOQueue(cpuTime);
    cout << endl;

    //Displaying final output for SJF algorithm
    cout << "Finished" << endl;
    cout << endl;
    cout << "Total time: " << cpuTime << endl;
    cout << endl << "CPU Utlization: " << 100-((float(readyQueue.getIdle()))/(float(cpuTime))*100) << "%" << endl;


    //printing the RT, WT, TT, and Avgs
    completeQueue.printData();
    

    cout << endl << endl;
    return 0;
}
